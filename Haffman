#include <iostream>
#include <map>
#include <list>
#include <algorithm>
using namespace std;
class Uzel
{
public:
	char s;
	int key;
	Uzel* left, *right;
	Uzel()
	{
		left = NULL;
		right = NULL;
	}
	Uzel(char a, int k)
	{
		left = NULL;
		right = NULL;
		s = a;
		key = k;
	}
	Uzel(const Uzel &p)
	{
	   left=p.left;
	   right=p.right;
	   s=p.s;
	   key=p.key;
	}
	Uzel(Uzel* L, Uzel* R)
	{
		key = L->key + R->key;
		left = L;
		right = R;
	}
	friend class Haffman;
};

list<Uzel*> List;
class Haffman
{
    public :
	map<char, int>CharMap; 
//	Haffman();
//	~Haffman();
	void CreateMap(char* s);
	void CreateList();
	static bool comp(Uzel *l,Uzel *r)
	{
	    return l->key<r->key;
	};
};
void Haffman :: CreateMap(char *s)
{
	int i = 0;
	while (s[i] != '\0')
	{
		CharMap[s[i]]=0;
		i++;
	}
	i = 0;
	while (s[i] != '\0')
	{
		CharMap[s[i]]++;
		i++;
	}
}
void Haffman :: CreateList()
{
  for(auto it = CharMap.begin(); it!= CharMap.end(); it++)
  {
  Uzel *p = new Uzel(it->first,it->second);
  cout<< it->first << " - " << it->second << endl;
  List.push_back(p);
  }
  
  while(List.size() != 1)
  {
    List.sort(comp);
    Uzel *R=List.front();
    List.pop_front();
    Uzel *L=List.front();
    List.pop_front();
    Uzel *p= new Uzel(L,R);
    List.push_back(p);
  }
    return;
}

int main(void)
{
Haffman a;
char b[]={"cbnbbnvbabxcvbcvxxvcxvcadasdasd"};
a.CreateMap(b);
a.CreateList(); 

}
